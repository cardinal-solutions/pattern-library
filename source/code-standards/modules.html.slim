---
title: Markup
id: 'code-standards'
---
h1 Modules

p Components are the primary building block of any interface. They are the bits and bobs that combine to form a cohesive user interface; from menus to messages, pagers to pictures, and everything else in between.

p Components should be written to be able to be dropped in to any position in a layout. The way to accomplish this is to build components using <a href="https://github.com/Snugug/eq.js">eq.js</a>. This will allow a component and its elements to respond appropriately regardless of where they land in a given document flow.

p Components should be simple layouts to position elements inside of themselves either through extends or by constructing a component with elements placed inside an internal layout (decide before starting a project and carry that decision through the lifespan of the project) if the layout is not component specific.

p They may choose to control their overall sizing and one-off sizing and positioning, but those choices should be relative to the container they are dropped into and not layout or position specific.

h3 Base Module

p Each project should contain a base component which contains base styling for raw tags (h2, blockquote, p, etc…).

p The base component's elements should be named after the tag they style, so basic styling for h2 would provide both an extendable and full class <code>.base--h2</code>.

p To apply these styles, create a styled aspect, providing a <code>.base--STYLED</code> class. This aspect should have raw elements styled without classes, allowing it to be dropped into any section of a site and provide basic styling. Additional aspects can be created to create different base stylings.

h3 Layouts

p Layouts are the structure of an interface. Providing structure to pages and components, layouts are responsible for sizing and positioning of their elements.

p There are two kinds of layouts, simple and complex. The distinguishing factor between simple and complex layouts is that complex layouts adapt and change their sizing and positioning based on media queries whereas simple layouts do not.

p Complex layouts are generally used for laying out pages and regions within pages, with simple layouts being used for laying out sub-sections inside complex layouts and providing common layouts for components.

p While simple layouts may be used within components or even within other simple or complex layouts, complex layouts should never be used within one another.

h3 Aspects

p Aspects are a specific implementation of a component or layout.

p Components and layouts should always have an aspect when used to determine what kind of implementation is being worked with. Aspects can be used as a way to pivot styling of elements if need be or to control implementation-specific styling, such as changing colors in a message component or determining exact sizing of a body element of a layout.

p It is preferable to use aspects as pivot points rather than to create unique classes for each element as it allows for the reuse of identical elements regardless of the aspect of a component or layout they are used in.

h3 Elements

p Elements are the individual pieces that make up a component or layout, each being component or layout specific.

p Think of them as individual HTML elements (h2, blockquote, p, etc…) in components and regions and items in layouts.

p When styling an item inside components or layouts, using raw tag selectors is strongly discouraged.

p Instead, use element classes for each item. This is to avoid any potential conflicts, such as what would happen if there were a pager component inside of a slider component (.slider li and .pager li).

p The only exception to this rule is for the base component.

h3 States

p States provide a way to alter how a component, layout, element, or aspect behaves. Common states include active, open, and closed.

p Because states live in the in-between world of JavaScript and CSS, often changing with interactions from the user, states are controlled by data attributes and get attached to the components, layouts, elements, or aspects they are modifying.

p This provides easy to maintain states on a per-object basis without needing per-object states.

h3 CSS Naming Conventions

p Components and layouts form the prefixes for aspects and element names, separated by a double dash (--).

p Simple layouts start with an underscore (_) and complex layouts start with two underscores (__) to distinguish them from components.

p Aspects are written in all caps (CAPS) to distinguish them from elements, which are written in all lowercase (lowercase).

p States are applied to the state data attribute (<code>data-state</code>) and queried using attribute selectors as they have the strong tendency to either be manipulated by JavaScript or to be used as a hook for JavaScript.

If an object has multiple states, each state should be space (' ') separated in the data-state data attribute. A sample document written up using this naming convention could look like the following:

/ <!-- Article layout with Big Media aspect -->
/ <div class="__article--BIG-MEDIA">
/   <!-- Main element of Article layout -->
/   <article class="__article--main">
/     <!-- Heading element of Article layout -->
/     <div class="__article--heading">
/       <!-- PRIMARY Heading aspect of Typography component -->
/       <h1 class="typography--PRIMARY-HEADING">Article Title</h1>
/     </div>
/     <!-- Media element of Article layout -->
/     <figure class="__article--media">
/       <!-- Video components, Full HD aspect -->
/       <div class="video--FULL-HD">
/         <!-- Video element of Video component -->
/         <video class="video--video" />
/       </div>
/     </figure>
/     <!-- Body element of Article layout, Area aspect of Typography component  -->
/     <div class="__article--body typography--AREA">
/       <h2>Some user entered copy goes here</h2>
/       <p>Yay Copy!</p>
/     </div>
/   </article>
/   <!-- Secondary element of Article layout  -->
/   <aside class="__article--secondary">
/     <!-- Popular aspect of Related component -->
/     <div class="related--POPULAR">
/       <!-- Heading element of Related component -->
/       <div class="related--heading">
/         <!-- Tertiary Heading aspect of Typography component -->
/        <h2 class="typography--TERTIARY-HEADING">Block Title</h2>
/      </div>
/      <!-- Body element of Related component -->
/      <div class="related--body">
/        <p>Yay Copy!</p>
/      </div>
/    </div>
/   <aside>
/ </div>

